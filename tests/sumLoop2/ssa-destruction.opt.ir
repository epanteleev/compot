extern void @printInt(i32)


define i32 @sumLoop2(i32, i32)
define u64 @main()

define ptr @sumLoop2(%0:i32, %1:i32) {
entry:	
[r15]	%0x5 = copy i32 0
[r14]	%0x6 = copy i32 0
	br label L1
L1:	; pred=entry, L8
[r15]	%phi1x5 = phi i32 [%0x5: entry, %8x2: L8]
[r14]	%phi1x4 = phi i32 [%0x6: entry, %8x3: L8]
[r13]	%cmp1x2 = icmp lt i32 %phi1x5, %0
	br u1 %cmp1x2 label %L2, label %L3 	kill: %cmp1x2
L2:	; pred=L1
[r13]	%2x0 = copy i32 %phi1x4
[r12]	%2x1 = copy i32 0
	br label L4
L4:	; pred=L2, L7
[r13]	%phi4x4 = phi i32 [%2x0: L2, %7x2: L7]
[r12]	%phi4x3 = phi i32 [%2x1: L2, %7x3: L7]
[rbx]	%cmp4x2 = icmp lt i32 %phi4x3, %1
	br u1 %cmp4x2 label %L5, label %L6 	kill: %cmp4x2
L5:	; pred=L4
[rbx]	%5x2 = add i32 %phi4x4, %phi1x5
[rbx]	%5x4 = add i32 %5x2, %phi4x3	kill: %5x2
	br label L7
L7:	; pred=L5
[r14]	%7x1 = add i32 %phi4x3, 1	kill: %phi4x3
[r13]	%7x2 = copy i32 %5x4	kill: %5x4
[r12]	%7x3 = copy i32 %7x1	kill: %7x1
	br label L4
L6:	; pred=L4
	br label L8
L8:	; pred=L6
[r11]	%8x1 = add i32 %phi1x5, 1
[r15]	%8x2 = copy i32 %8x1	kill: %8x1
[r14]	%8x3 = copy i32 %phi4x4	kill: %phi4x4
	br label L1
L3:	; pred=L1
	ret i32 %phi1x4	kill: %phi1x4
}
define ptr @main() {
entry:	
	downstackframe [i32 @sumLoop2(i32, i32)]
[rdi]	%0x1 = copy i32 3
[rsi]	%0x2 = copy i32 5
[r15]	%0x0 = call i32 @sumLoop2(%0x1:i32, %0x2:i32)	kill: %0x1,%0x2
	upstackframe [i32 @sumLoop2(i32, i32)]
	downstackframe [void @printInt(i32)]
[rdi]	%0x3 = copy i32 %0x0	kill: %0x0
	call void @printInt(%0x3:i32)	kill: %0x3
	upstackframe [void @printInt(i32)]
	ret u64 0
}
