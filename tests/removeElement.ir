extern void @printByteArrayWithSpaces(ptr, i32)

define void @remove_element(%array: ptr, %index: i32, %array_length: i32) {
entry:
  %array.addr = alloc ptr
  %index.addr = alloc i32
  %array_length.addr = alloc i32
  %i = alloc i32
  store ptr %array.addr, ptr %array
  store ptr %index.addr, i32 %index 
  store ptr %array_length.addr, i32 %array_length
  %0 = load i32 %index.addr
  store ptr %i, i32 %0
  br label %for.cond

for.cond:
  %1 = load i32 %i
  %2 = load i32 %array_length.addr
  %sub = sub i32 %2, 1
  %cmp = icmp lt i32 %1, %sub
  br u1 %cmp label %for.body, label %for.end

for.body:
  %3 = load ptr %array.addr
  %4 = load i32 %i
  %add = add i32 %4, 1
  %idxprom = sext i32 %add to i64
  %arrayidx = gep i8, ptr %3, i64 %idxprom
  %5 = load i8 %arrayidx
  %6 = load ptr %array.addr
  %7 = load i32 %i
  %idxprom1 = sext i32 %7 to i64
  %arrayidx2 = gep i8, ptr %6, i64 %idxprom1
  store ptr %arrayidx2, i8 %5
  br label %for.inc

for.inc:
  %8 = load i32 %i
  %inc = add i32 %8, 1
  store ptr %i, i32 %inc
  br label %for.cond

for.end:
  ret void
}

; arr[] = {4, 2, 0, 9, 90, 45, 55, 89, 4, 23}
define i32 @main() {
entry:
  %retval = alloc i32
  %arr = alloc <i8x10>
  store ptr %retval, i32 0
  %arrayidx = gep i8, ptr %arr, i64 0
  store ptr %arrayidx, i8 4
  %arrayidx1 = gep i8, ptr %arr, i64 1
  store ptr %arrayidx1, i8 2
  %arrayidx2 = gep i8, ptr %arr, i64 2
  store ptr %arrayidx2, i8 0
  %arrayidx3 = gep i8, ptr %arr, i64 3
  store ptr %arrayidx3, i8 9
  %arrayidx4 = gep i8, ptr %arr, i64 4
  store ptr %arrayidx4, i8 90
  %arrayidx5 = gep i8, ptr %arr, i64 5
  store ptr %arrayidx5, i8 45
  %arrayidx6 = gep i8, ptr %arr, i64 6
  store ptr %arrayidx6, i8 55
  %arrayidx7 = gep i8, ptr %arr, i64 7
  store ptr %arrayidx7, i8 89
  %arrayidx8 = gep i8, ptr %arr, i64 8
  store ptr %arrayidx8, i8 4
  %arrayidx9 = gep i8, ptr %arr, i64 9
  store ptr %arrayidx9, i8 23
  call void @remove_element(%arrayidx: ptr, 4: i32, 10: i32)
  call void @printByteArrayWithSpaces(%arrayidx: ptr, 9: i32)
  ret i32 0
}
